// Generated by Apple Swift version 2.2 (swiftlang-703.0.18.8 clang-703.0.31)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if defined(__has_feature) && __has_feature(modules)
@import UIKit;
@import Foundation;
@import ObjectiveC;
@import CoreBluetooth;
@import MessageUI;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class UIWindow;
@class UIApplication;
@class NSObject;

SWIFT_CLASS("_TtC7DemoApp11AppDelegate")
@interface AppDelegate : UIResponder <UIApplicationDelegate>
@property (nonatomic, strong) UIWindow * _Nullable window;
- (BOOL)application:(UIApplication * _Nonnull)application didFinishLaunchingWithOptions:(NSDictionary * _Nullable)launchOptions;
- (void)applicationWillResignActive:(UIApplication * _Nonnull)application;
- (void)applicationDidEnterBackground:(UIApplication * _Nonnull)application;
- (void)applicationWillEnterForeground:(UIApplication * _Nonnull)application;
- (void)applicationDidBecomeActive:(UIApplication * _Nonnull)application;
- (void)applicationWillTerminate:(UIApplication * _Nonnull)application;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface NSData (SWIFT_EXTENSION(DemoApp))

/// Convert the hexadecimal value into a String
///
/// \param Nothing 
///
/// \returns  The value converted
- (NSString * _Nullable)hexadecimalString;
@end

@class CBPeripheral;
@class CBCentralManager;
@class NSNumber;
@class NSError;
@class CBService;
@class CBCharacteristic;


/// <h2>StretchSenseAPI</h2>
/// The StretchSense API defines all functions required to connect to, and stream data from, the StretchSense Fabric Sensors linked to your iOS application\Author 
///
/// StretchSense\Copyright 
///
/// 2016 StretchSense\Date 
///
/// 1/06/2016\Version 
///
/// 1.0.0\Note 
///
/// Within the StretchSenseClass
///
/// <ul><li>Peripherals lists (available, connected, saved)</li><li>General settings  (number of samples to hold in memory, sampling time, average filtering value)</li><li>Feedback information</li></ul>
/// <code>//Example 1: Connect to the available sensors
/// 
/// class ViewController: UIViewController {
/// 
/// var stretchsenseObject = StretchSenseAPI()
/// 
/// override func viewDidLoad() {
/// // This function is the first function called by the View Controller
/// super.viewDidLoad()
/// 
/// // Init the StretchSense API and Bluetooth
/// stretchsenseObject.startBluetooth()
/// // Start Scanning new peripheral
/// stretchsenseObject.startScanning()
/// }
/// 
/// @IBAction func connect(sender: AnyObject) {
/// // Get all available peripherals
/// var listPeripheralAvailable = stretchsenseObject.getListPeripheralsAvailable()
/// // Explore all the available peripherals
/// for myPeripheralAvailable in listPeripheralAvailable{
/// // Connect to all available, peripheral devices
/// stretchsenseObject.connectToPeripheralWithCBPeripheral(myPeripheralAvailable)
/// print(myPeripheralAvailable)
/// }
/// }
/// 
/// @IBAction func printValue(sender: AnyObject) {
/// // Get a list of all connect perihpheral devices
/// var listPeripheralConnect = stretchsenseObject.getListPeripheralsConnected()
/// // Print current capacitance value from all of the connected peripherals
/// for myPeripheralConnected in listPeripheralConnect{
/// // Print the value of all the peripheral connected
/// print(myPeripheralConnected.value)
/// }
/// }
/// }
/// 
/// 
/// //Example 2: Use notifications to trigger continuous, real-time sampling of capacitance values from 3 sensors (already connected)
/// 
/// class ViewController: UIViewController {
/// 
/// override func viewDidLoad() {
/// // This function is the first function called by the View Controller
/// super.viewDidLoad()
/// 
/// // Create the notifier
/// let defaultCenter = NSNotificationCenter.defaultCenter()
/// // Set the observers for each of the 3 sensors (just add lines and functions to add more sensors)
/// defaultCenter.addObserver(self, selector: #selector(ViewController.newValueDetected0), name: "UpdateValueNotification0",object: nil)
/// defaultCenter.addObserver(self, selector: #selector(ViewController.newValueDetected1), name: "UpdateValueNotification1",object: nil)
/// defaultCenter.addObserver(self, selector: #selector(ViewController.newValueDetected2), name: "UpdateValueNotification2",object: nil)
/// }
/// 
/// func newValueDetected0() {
/// // A notification has been detected from the sensor 0, the function newValueDetected0() is called
/// if listPeripheralConnected.count > 0 {
/// listPeripheralsConnected = stretchsenseObject.getListPeripheralsConnected()
/// print("value sensor 0 updated, new value: (\listPeripheralsConnected[0].value) ")
/// }
/// }
/// 
/// func newValueDetected1() {
/// // A notification has been detected from the sensor 1, the function newValueDetected1() is called
/// if listPeripheralConnected.count > 1 {
/// listPeripheralsConnected = stretchsenseObject.getListPeripheralsConnected()
/// print("value sensor 1 updated, new value: (\listPeripheralsConnected[1].value) ")
/// }
/// }
/// 
/// func newValueDetected2() {
/// // A notification has been detected from the sensor 2, the function newValueDetected2() is called
/// if listPeripheralConnected.count > 2 {
/// listPeripheralsConnected = stretchsenseObject.getListPeripheralsConnected()
/// print("value sensor 2 updated, new value: (\listPeripheralsConnected[2].value) ")
/// }
/// }
/// 
/// 
/// </code>
SWIFT_CLASS("_TtC7DemoApp15StretchSenseAPI")
@interface StretchSenseAPI : NSObject <CBPeripheralDelegate, CBCentralManagerDelegate>

/// Number of data samples within the filtering array
@property (nonatomic) NSInteger numberOfSample;

/// Initialisation value of the sampling time value notes: SamplingTime = (value + 1) * 40ms
@property (nonatomic) uint8_t samplingTimeNumber;

/// Size of the filter based on the Number of samples
@property (nonatomic) uint8_t filteringNumber;

/// Initialisation of the Manager\Note 
///
/// Must be the first function called, to check if bluetooth is enabled and initialise the manager
///
/// <ul><li>parameter: Nothing</li></ul>
/// \returns  Nothing
- (void)startBluetooth;

/// Start scanning for new peripheral
///
/// \param Nothing 
///
/// \returns  Nothing
- (void)startScanning;

/// Stop the bluetooth scanning
///
/// \param Nothing 
///
/// \returns  Nothing
- (void)stopScanning;

/// Function to connect the manager to an available peripheral\Note 
///
/// If the string UUID given does not refer to an available peripheral, do nothing\Note 
///
/// Variation of the function connectToPeripheralWithCBPeripheral
///
/// \param uuid the string UUID of the available peripheral you want to connect.
///
/// \returns  Nothing
- (void)connectToPeripheralWithUUID:(NSString * _Nonnull)uuid;

/// Function to connect the manager to an available peripheral
///
/// \param myPeripheral the peripheral available (type: CBPeripheral) you want to connect
///
/// \returns  Nothing
- (void)connectToPeripheralWithCBPeripheral:(CBPeripheral * _Nullable)myPeripheral;

/// Function to disconnect from a connected peripheral\Note 
///
/// If the UUID given does not refer to a connected peripheral, do nothing
///
/// \param uuid the string UUID of the peripheral you want to disconnect.
///
/// \returns  Nothing
- (void)disconnectOnePeripheralWithUUID:(NSString * _Nonnull)uuid;

/// Function to disconnect from a connected peripheral\Note 
///
/// Variation of the function connectToPeripheralWithUUID
///
/// \param myPeripheral the peripheral connected (type CBPeripheral) you want to disconnect.
///
/// \returns  Nothing
- (void)disconnectOnePeripheralWithCBPeripheral:(CBPeripheral * _Nonnull)myPeripheral;

/// Function to disconnect all peripherals
///
/// \param Nothing 
///
/// \returns  Nothing
- (void)disconnectAllPeripheral;

/// Return the list of the UUID's of the available peripherals
///
/// \param Nothing 
///
/// \returns  The UUID of all the peripheral available
- (NSArray<NSString *> * _Nonnull)getListUUIDPeripheralsAvailable;

/// Return the samplingTime's value of the peripheral\Note 
///
/// SamplingTime is the interval between two data packets (SamplingTime = (value + 1) * 40ms)
///
/// \param myPeripheral The peripheral you want the samplingTime value
///
/// \returns  The value of the samplingTime, -1 in the event of failure
- (NSInteger)getSamplingTimeValue:(CBPeripheral * _Null_unspecified)myPeripheral;

/// Return the shutdown's value of the peripheral
///
/// \param myPeripheral The peripheral you want the shutdown value
///
/// \returns  The value of the shutdown
- (NSInteger)getShutdownValue:(CBPeripheral * _Null_unspecified)myPeripheral;

/// Update the samplingTime of a selected peripheral device\Note 
///
/// SamplingTime = (value + 1) * 40ms
///
/// \param myPeripheral The peripheral you want to update
///
/// \param dataIn The sampling time (data rate) value you want to set for this peripheral
///
/// \returns  Nothing
- (void)writeSamplingTime:(uint8_t)dataIn myPeripheral:(CBPeripheral * _Nullable)myPeripheral;

/// Change the value of the shutdown from the peripheral
///
/// \param myPeripheral The peripheral you want to update
///
/// \param dataIn The shutdown value you want to set for this peripheral [0 - Stay on, 1 - Shutdown]
///
/// \returns  Nothing
- (void)writeShutdown:(uint8_t)dataIn myPeripheral:(CBPeripheral * _Nullable)myPeripheral;

/// Convert the Raw data from the sensor characterisitic to a capacitance value, units pF (picoFarads)\Note 
///
/// Capacitance(pF) = RawData * 0.10pF
///
/// \param rawData The raw data from the peripheral
///
/// \returns  The real capacitace value in pF
- (float)convertRawDataToCapacitance:(NSInteger)rawDataInt;

/// Returns the number available peripheral devices that are not connected
///
/// \param Nothing 
///
/// \returns  The number of peripherals available
- (NSInteger)getNumberOfPeripheralAvailable;

/// Returns the number of connected peripheral
///
/// \param Nothing 
///
/// \returns  The number of connected peripherals
- (NSInteger)getNumberOfPeripheralConnected;

/// Return the last information (event update) received from the sensor
///
/// \param Nothing 
///
/// \returns  The last information from the sensor
- (NSString * _Nonnull)getLastInformation;

/// Check the state of the Bluetooth Low Energy
- (void)centralManagerDidUpdateState:(CBCentralManager * _Nonnull)central;

/// Scan and filter all Bluetooth Low energy devices to find any available StretchSense peripherals
- (void)centralManager:(CBCentralManager * _Nonnull)central didDiscoverPeripheral:(CBPeripheral * _Nullable)peripheral advertisementData:(NSDictionary<NSString *, id> * _Nonnull)advertisementData RSSI:(NSNumber * _Nonnull)RSSI;

/// Establish a connection with a peripheral and initialise a StretchSensePeriph object
- (void)centralManager:(CBCentralManager * _Nonnull)central didConnectPeripheral:(CBPeripheral * _Nonnull)peripheral;

/// When a device is disconnected, we remove it from the value list and the peripheralListAvailable
- (void)centralManager:(CBCentralManager * _Nonnull)central didDisconnectPeripheral:(CBPeripheral * _Nonnull)peripheral error:(NSError * _Nullable)error;

/// When the specified services are discovered, the peripheral calls the peripheral:didDiscoverServices: method of its delegate object
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverServices:(NSError * _Nullable)error;

/// Once connected to a peripheral, enable notifications on the Sensor characteristic
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverCharacteristicsForService:(CBService * _Nonnull)service error:(NSError * _Nullable)error;

/// Get/read capacitance data from the peripheral device when a notificiation is received
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateValueForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSNotificationCenter;
@class UIButton;
@class UILabel;
@class NSBundle;
@class NSCoder;


/// Main viewController
SWIFT_CLASS("_TtC7DemoApp14ViewController")
@interface ViewController : UIViewController

/// The stretchsense object with all the functions
@property (nonatomic, readonly, strong) StretchSenseAPI * _Nonnull stretchsenseObject;

/// The list of all the UUID's sensor available
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull listUUIDPeripheralAvailable;

/// The observer waiting for a new value notification
@property (nonatomic, strong) NSNotificationCenter * _Nonnull observerValue;

/// The observer waiting for a new feedback information notification
@property (nonatomic, strong) NSNotificationCenter * _Nonnull observerInformation;

/// The outlet label from the storyboard with the UUID of the sensor
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified labelID;

/// The outlet label from the storyboard with the value of the sensor
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified labelData;

/// The outlet label from the storyboard with the feedback information from the sensor
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified informationLabel;
- (void)viewDidLoad;

/// This function is called each time a notification "UpdateValueNotification0" is detected
///
/// <ul><li>If a notification is received, change the label value with the new value from the sensor</li></ul>
- (void)newValueDetected;

/// This function is called each time a notification "UpdateInfo" is detected
///
/// <ul><li>If a notification is received, change label value</li></ul>
- (void)newInfoDetected;

/// This action call the function startScanning()
- (IBAction)buttonScanning:(UIButton * _Nonnull)sender;

/// This action display the UUID of the first sensor available
- (IBAction)buttonGetPeripheral:(UIButton * _Nonnull)sender;

/// This action connect the manager with the first sensor available
- (IBAction)buttonConnect:(UIButton * _Nonnull)sender;

/// This action display the data with the first sensor connected
- (IBAction)buttonGetData:(UIButton * _Nonnull)sender;

/// This action enable the notification "UpdateValueNotification0" to call the function newValueDetected()
- (IBAction)buttonNotificationEnable:(UIButton * _Nonnull)sender;

/// This action disable the notification "UpdateValueNotification0"
- (IBAction)buttonNotificationDisable:(UIButton * _Nonnull)sender;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface ViewController (SWIFT_EXTENSION(DemoApp)) <MFMailComposeViewControllerDelegate>

/// Convert a [String] to NSData
///
/// \param array the array of String
///
/// \returns  array of String converted
- (NSData * _Nonnull)stringArrayToNSData:(NSArray<NSString *> * _Nonnull)array;

/// Save and Share a [String]\Note 
///
/// Format and save recorded capacitance data to file (.csv)
///
/// \param array the array of String
///
/// \returns  Nothing
- (void)saveAndExport:(NSArray<NSString *> * _Nonnull)stringArrayToShare;
@end

#pragma clang diagnostic pop
